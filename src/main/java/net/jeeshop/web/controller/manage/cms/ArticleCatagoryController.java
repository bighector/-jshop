package net.jeeshop.web.controller.manage.cms;import java.io.IOException;import java.util.List;import net.jeeshop.biz.base.service.BaseService;import net.jeeshop.biz.cms.bean.ArticleCatagoryBean;import net.jeeshop.biz.cms.model.ArticleCatagory;import net.jeeshop.biz.cms.model.ArticleCatagoryExample;import net.jeeshop.biz.cms.service.ArticleCatagoryService;import net.jeeshop.core.SystemManager;import net.jeeshop.core.util.PinYinUtil;import net.jeeshop.web.controller.manage.ManageBaseController;import net.sf.json.JSONArray;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import com.google.common.collect.Lists;/** * 文章分类,可以无限极分类 * * @author huangf * @author dylan */@Controller@RequestMapping("/manage/cms/articleCatalog/")public class ArticleCatagoryController extends ManageBaseController<ArticleCatagory, ArticleCatagoryExample> {    private static final Logger logger = LoggerFactory            .getLogger(ArticleCatagoryController.class);    @Autowired    private ArticleCatagoryService catagoryService;    @Autowired    private SystemManager systemManager;    private static final String page_toList = "/manage/cms/articleCatalogList";    private static final String page_toAdd = "/manage/cms/articleCatalogEdit";    private static final String page_toEdit = "/manage/cms/articleCatalogEdit";    public ArticleCatagoryController() {        super.page_toList = page_toList;        super.page_toAdd = page_toAdd;        super.page_toEdit = page_toEdit;    }    @Override    public BaseService<ArticleCatagory, ArticleCatagoryExample> getService() {        return catagoryService;    }    @ModelAttribute("catalogs")    public List<ArticleCatagoryBean> getCatalogs() {        return systemManager.getArticleCatalogs();    }    /**     * 公共的分页方法     *     * @return     * @throws Exception     */    @Override    @RequestMapping("selectList")    public String selectList(ModelMap modelMap) {        List<ArticleCatagoryBean> root = catagoryService.loadRoot();        List<ArticleCatagoryBean> result = Lists.newArrayList();        for (ArticleCatagoryBean cata : root) {            appendChildren(cata, result);        }        modelMap.addAttribute("list", result);        return page_toList;    }    private void appendChildren(ArticleCatagoryBean catalog, List<ArticleCatagoryBean> list) {        if (catalog == null) {            return;        }        list.add(catalog);        if (catalog.getChildren() != null && catalog.getChildren().size() > 0) {            for (ArticleCatagoryBean cata : catalog.getChildren()) {                appendChildren(cata, list);            }        }    }    /**     * 递归查询数据库获取商品目录     * 返回tree的数据结构 从PID=0开始加载菜单资源 获取指定节点的全部子菜单（包括当前菜单节点）     *     * @return     * @throws Exception     */    @RequestMapping("getRoot")    @ResponseBody    public String getRoot(ArticleCatagory e) throws Exception {        List<ArticleCatagoryBean> root = catagoryService.loadRoot();        JSONArray json = JSONArray.fromObject(root);        logger.debug("catalog json : " + json.toString());        String jsonStr = json.toString();        return jsonStr;    }    /**     * 根据ID删除指定的目录,如果该类目下面有子类目,则会一并删除;如果该类目下面有商品,则会一并删除     *     * @return     * @throws Exception     */    @Override    @RequestMapping(value = "deleteByID", method = RequestMethod.GET)    @ResponseBody    public String deleteByID(Long id,RedirectAttributes flushAttrs){        if (id == null) {            throw new NullPointerException("参数不正确！");         }        int isSuccess = catagoryService.deleteById(id);        logger.info("delete resule : {}", isSuccess);        resetCatalogCache();        return String.valueOf(isSuccess);    }    @Override    protected void beforeToAdd(ArticleCatagory e, ModelMap modelMap) {        modelMap.addAttribute("catalogs", catagoryService.loadRoot());    }    @Override    protected void beforeToEdit(ArticleCatagory e, ModelMap modelMap) {        modelMap.addAttribute("catalogs", catagoryService.loadRoot());    }    /**     * 添加/修改/删除 某一个类别后，需要重新加载缓存数据。并且清除JSON字符串缓存，以便重新生成新的。     *     * @throws Exception     */    private void resetCatalogCache() {    	catagoryService.refreshCache();    }    @RequestMapping(value = "insert", method = RequestMethod.POST)    public String insert(ArticleCatagory e, RedirectAttributes flushAttrs) {        if (e.getParentId() == null) {            e.setParentId(0L);        }        super.insert(e, flushAttrs);        //刷新缓存        resetCatalogCache();        return "redirect:selectList";    }    @RequestMapping(value = "update", method = RequestMethod.POST)    public String update(ArticleCatagory e, RedirectAttributes flushAttrs) {        super.update(e, flushAttrs);        //刷新缓存        resetCatalogCache();        return "redirect:selectList";    }    /**     * 唯一性检查     *     * @return     * @throws java.io.IOException     */    @RequestMapping(value = "uniqueCode", method = RequestMethod.POST)    @ResponseBody    public String uniqueCode(ArticleCatagory e) throws IOException {        logger.error("unique code = " + e.getCategoryCode());        if (StringUtils.isNotBlank(e.getCategoryCode())) {            ArticleCatagory catalog = catagoryService.selectByCode(e.getCategoryCode());            if (catalog == null) {                //数据库中部存在此编码                return "{\"ok\":\"编码可以使用!\"}";            } else {                if (e.getId() != null && e.getId().compareTo(catalog.getId()) == 0) {                    //update操作，又是根据自己的编码来查询的，所以当然可以使用啦                    return "{\"ok\":\"编码可以使用!\"}";                } else {                    //当前为insert操作，但是编码已经存在，则只可能是别的记录的编码                    return "{\"error\":\"编码已经存在!\"}";                }            }        } else {            return "{\"error\":\"编码不能为空!\"}";        }//		return null;    }    /**     * 根据类别名称自动获取拼音-ajax     *     * @return     * @throws java.io.IOException     */    @RequestMapping(value = "autoCode", method = RequestMethod.POST)    @ResponseBody    public String autoCode(ArticleCatagory e) throws IOException {        if (StringUtils.isBlank(e.getCategoryName())) {            return null;        }        final String pinyin = PinYinUtil.getPingYin(e.getCategoryName());        logger.debug("pinyin=" + pinyin);        String _pinyin = pinyin;        for (int i = 1; true; i++) {            ArticleCatagory c = catagoryService.selectByCode(_pinyin);            if (c == null) {                return _pinyin;//				break;            } else {                _pinyin = pinyin + i;            }        }//		return null;    }}